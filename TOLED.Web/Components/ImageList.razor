@using System.Collections
@using Microsoft.AspNetCore.Identity
@using TOLED.Web.Data.Models
@using TOLED.Web.Services
@using TOLED.Web.Encoders;
@using static TOLED.Web.Components.Pages.Home
@inject IUserImageService ImageService
@inject IUserDeviceService DeviceService
@inject IDialogService DialogService
@inject UserManager<ApplicationUser> UserManager

@if(!_loading){
    <MudPaper Class="pa-4" Elevation="2">
        <MudGrid Class="d-flex">
            <MudItem Class="d-inline-flex align-center justify-start py-8" xs="6">
                <MudText Typo="Typo.h3" GutterBottom>Your Image Collection</MudText>
            </MudItem>
            <MudItem Class="d-inline-flex align-center justify-end py-4" xs="6">
                <MudButton Color="Color.Success" StartIcon="@Icons.Material.Outlined.CloudUpload" OnClick="OnAddImage" Variant="Variant.Filled"><MudText>Add Image</MudText></MudButton>
            </MudItem>
            <MudItem xs="12">
                <MudDivider DividerType="DividerType.FullWidth"></MudDivider>
            </MudItem>
            <MudItem xs="12">
                <MudPaper Elevation="2">
                    <MudTable Items="@_images" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            @if (_seeAdvanced)
                            {
                                <MudTh>Id</MudTh>
                                <MudTh>Size</MudTh>
                                <MudTh>Frames</MudTh>
                            }
                            <MudTh>Original Image</MudTh>
                            <MudTh>Preview</MudTh>
                            <MudTh>Edit</MudTh>
                            <MudSwitch T="bool" ThumbIcon="@Icons.Material.Rounded.Settings" @bind-Value="_seeAdvanced"></MudSwitch>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name"><MudText Typo="Typo.h5">@context.Name</MudText></MudTd>
                            @if (_seeAdvanced)
                            {
                                <MudTd DataLabel="Id"><MudText Typo="Typo.caption">@context.Id</MudText></MudTd>
                                <MudTd DataLabel="Size"><MudText Typo="Typo.caption">@context.DisplayData.Length</MudText></MudTd>
                                <MudTd DataLabel="Frames"><MudText Typo="Typo.caption">@context.Frames</MudText></MudTd>
                            }

                            <MudTd>
                                <PPImagePreview ImageId="@context.Id" @ref="@RawPreviewRef" RawData="@context.RawData" ResizeOptions="@context.MutateOptions"></PPImagePreview>
                            </MudTd>
                            <MudTd>
                                <PPImagePreview ImageId="@context.Id" @ref="@DisplayPreviewRef" EncodeForDisplay="true" RawData="@context.RawData" ResizeOptions="@context.MutateOptions"></PPImagePreview>
                            </MudTd>
                            <MudTd>
                                <MudItem xs="12">
                                    <MudSelect T="PPDevice" Label="Send to devices" MultiSelection="true" @bind-SelectedValues="_selectedDisplays">
                                        @foreach (var device in _devices)
                                        {
                                            <MudSelectItem T="PPDevice" Value="@device">
                                                <MudText>@device.Name</MudText>
                                            </MudSelectItem>
                                        }
                                    </MudSelect>
                                    <MudButton Color="Color.Secondary" StartIcon="@Icons.Material.Outlined.Send" OnClick="@(async () => await OnSendToDevice(new ToggleActiveEventArgs(context.Id, true)))"></MudButton>
                                    <MudIconButton Ripple="true" DropShadow="true" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Text" OnClick="@(async () => await OnDeleteAsync(@context.Id))"></MudIconButton>
                                </MudItem>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudPaper>
}
else {
    <MudOverlay @bind-Visible="_loading" DarkBackground="true" ZIndex="9999" AutoClose="true">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </MudOverlay>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; } = default!;

    private ApplicationUser _user = default!;
    private ICollection<PPImage> _images = new List<PPImage>();
    private ICollection<PPDevice> _devices = new List<PPDevice>();
    private bool _loading = true;
    private bool _seeAdvanced = false;
    private IEnumerable<PPDevice> _selectedDisplays = new List<PPDevice>();

    private Dictionary<int, PPImagePreview> _rawPreviews = new();
    public PPImagePreview RawPreviewRef 
    { 
        set {
            if (value.ImageId != null && !_displayPreviews.ContainsKey(value.ImageId.Value))
            {
                _rawPreviews.Add(value.ImageId.Value, value);
            }
        }
    }
    private Dictionary<int, PPImagePreview> _displayPreviews = new();
    public PPImagePreview DisplayPreviewRef
    {
        set
        {
            if (value.ImageId != null && !_displayPreviews.ContainsKey(value.ImageId.Value))
            {
                _displayPreviews.Add(value.ImageId.Value, value);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _user = await GetAuthenticatedUserAsync();
        _images = await ImageService.GetImagesForUserAsync(_user);
        _devices = await DeviceService.GetDevicesForUserAsync(_user);
        await base.OnInitializedAsync();
    }

    private async Task<ApplicationUser> GetAuthenticatedUserAsync()
    {
        var principle = AuthenticationState.Result?.User;
        if (principle != null){
            var authenticatedUser = await UserManager.GetUserAsync(principle);
            if (authenticatedUser != null){
                return authenticatedUser;
            }
        }
        throw new Exception("User not authenticated");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        _loading = false;
        StateHasChanged();
        base.OnAfterRender(firstRender);
    }

    private async Task OnRefreshImages()
    {
        _loading = true;
        _images = await ImageService.GetImagesForUserAsync(_user);
        _loading = false;
    }

    private async Task EditImage(PPImage? image = null)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters();
        parameters.Add("Image", image);

        var dialog = await DialogService.ShowAsync<ImageDialog>("Edit Image", parameters, new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true });
        var result = await dialog.Result;
        if ((PPImage?)result?.Data != null)
        {
            var foundImage = _images.First(i => i.Id == ((PPImage)result.Data).Id);
            foundImage = (PPImage)result.Data;
            await _displayPreviews[foundImage.Id].GeneratePreview();
            await _rawPreviews[foundImage.Id].GeneratePreview();
        }
    }

    private async Task OnAddImage()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<ImageDialog>("Add Image", new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true });
        var result = await dialog.Result;
        if ((PPImage?)result?.Data != null)
        {
            _images.Add((PPImage)(result.Data));
            StateHasChanged();
        }
    }

    private async Task OnSendToDevice(ToggleActiveEventArgs args)
    {
        //await ImageService.SetActiveImageAsync(args.Id, setActive: !args.IsActive);
    }

    private async Task OnDeleteAsync(int id)
    {
        if (await ImageService.DeleteImageForUserAsync(_user, id)){
            var imageToRemove = _images.FirstOrDefault(i => i.Id == id);
            if (imageToRemove != null){
                _rawPreviews.Remove(id);
                _displayPreviews.Remove(id);
                _images.Remove(imageToRemove);
                StateHasChanged();
            }
        }
    }

    public class ToggleActiveEventArgs : EventArgs
    {
        public int Id { get; set; }
        public bool IsActive { get; set; }

        public ToggleActiveEventArgs(int id, bool isActive)
        {
            Id = id;
            IsActive = isActive;
        }
    }
}
